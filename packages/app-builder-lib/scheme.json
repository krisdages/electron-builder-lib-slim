{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {
    "AppImageOptions": {
      "additionalProperties": false,
      "properties": {
        "artifactName": {
          "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
          "type": [
            "null",
            "string"
          ]
        },
        "category": {
          "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
          "type": [
            "null",
            "string"
          ]
        },
        "description": {
          "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
          "type": [
            "null",
            "string"
          ]
        },
        "desktop": {
          "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
        },
        "executableArgs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "description": "The executable parameters. Pass to executableName"
        },
        "license": {
          "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). Only plain text is supported.",
          "type": [
            "null",
            "string"
          ]
        },
        "mimeTypes": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing."
        },
        "publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/GenericServerOptions"
            },
            {
              "$ref": "#/definitions/CustomPublishOptions"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GenericServerOptions"
                  },
                  {
                    "$ref": "#/definitions/CustomPublishOptions"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "synopsis": {
          "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
          "type": [
            "null",
            "string"
          ]
        }
      },
      "type": "object"
    },
    "AsarOptions": {
      "additionalProperties": false,
      "properties": {
        "externalAllowed": {
          "default": false,
          "description": "Allows external asar files.",
          "type": "boolean"
        },
        "ordering": {
          "type": [
            "null",
            "string"
          ]
        },
        "prebuiltPath": {
          "description": "Path to a prebuilt app.asar file, relative to projectDir if not absolute.",
          "type": [
            "null",
            "string"
          ]
        },
        "smartUnpack": {
          "default": true,
          "description": "Whether to automatically unpack executables files.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AuthorMetadata": {
      "additionalProperties": false,
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CustomNsisBinary": {
      "additionalProperties": false,
      "properties": {
        "checksum": {
          "default": "o+YZsXHp8LNihhuk7JsCDhdIgx0MKKK+1b3sGD+4zX5djZULe4/4QMcAsfQ+0r+a8FnwBt7BVBHkIkJHjKQ0sg==",
          "type": [
            "null",
            "string"
          ]
        },
        "url": {
          "default": "https://github.com/electron-userland/electron-builder-binaries/releases/download",
          "type": [
            "null",
            "string"
          ]
        },
        "version": {
          "default": "3.0.4.2",
          "type": [
            "null",
            "string"
          ]
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "CustomPublishOptions": {
      "additionalProperties": {},
      "properties": {
        "provider": {
          "description": "The provider. Must be `custom`.",
          "enum": [
            "custom"
          ],
          "type": "string"
        },
        "publishAutoUpdate": {
          "default": true,
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "type": "boolean"
        },
        "publisherName": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ]
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "updateProvider": {
          "description": "The Provider to provide UpdateInfo regarding available updates.  Required\nto use custom providers with electron-updater.",
          "typeof": "function"
        },
        "updaterCacheDirName": {
          "type": [
            "null",
            "string"
          ]
        }
      },
      "required": [
        "provider"
      ],
      "type": "object"
    },
    "DmgContent": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the file within the DMG. Defaults to basename of `path`.",
          "type": "string"
        },
        "path": {
          "description": "The path of the file within the DMG.",
          "type": "string"
        },
        "type": {
          "enum": [
            "dir",
            "file",
            "link"
          ],
          "type": "string"
        },
        "x": {
          "description": "The device-independent pixel offset from the left of the window to the **center** of the icon.",
          "type": "number"
        },
        "y": {
          "description": "The device-independent pixel offset from the top of the window to the **center** of the icon.",
          "type": "number"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "type": "object"
    },
    "DmgOptions": {
      "additionalProperties": false,
      "properties": {
        "artifactName": {
          "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
          "type": [
            "null",
            "string"
          ]
        },
        "background": {
          "description": "The path to background image (default: `build/background.tiff` or `build/background.png` if exists). The resolution of this file determines the resolution of the installer window.\nIf background is not specified, use `window.size`. Default locations expected background size to be 540x380.",
          "type": [
            "null",
            "string"
          ]
        },
        "backgroundColor": {
          "description": "The background color (accepts css colors). Defaults to `#ffffff` (white) if no background image.",
          "type": [
            "null",
            "string"
          ]
        },
        "contents": {
          "description": "The content â€” to customize icon locations. The x and y coordinates refer to the position of the **center** of the icon (at 1x scale), and do not take the label into account.",
          "items": {
            "$ref": "#/definitions/DmgContent"
          },
          "type": "array"
        },
        "format": {
          "default": "UDZO",
          "description": "The disk image format. `ULFO` (lzfse-compressed image (OS X 10.11+ only)).",
          "enum": [
            "UDBZ",
            "UDCO",
            "UDRO",
            "UDRW",
            "UDZO",
            "ULFO"
          ],
          "type": "string"
        },
        "icon": {
          "description": "The path to DMG icon (volume icon), which will be shown when mounted, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to the application icon (`build/icon.icns`).",
          "type": [
            "null",
            "string"
          ]
        },
        "iconSize": {
          "default": 80,
          "description": "The size of all the icons inside the DMG.",
          "type": [
            "null",
            "number"
          ]
        },
        "iconTextSize": {
          "default": 12,
          "description": "The size of all the icon texts inside the DMG.",
          "type": [
            "null",
            "number"
          ]
        },
        "internetEnabled": {
          "default": false,
          "description": "Whether to create internet-enabled disk image (when it is downloaded using a browser it will automatically decompress the image, put the application on the desktop, unmount and remove the disk image file).",
          "type": "boolean"
        },
        "publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/GenericServerOptions"
            },
            {
              "$ref": "#/definitions/CustomPublishOptions"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GenericServerOptions"
                  },
                  {
                    "$ref": "#/definitions/CustomPublishOptions"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "sign": {
          "default": false,
          "description": "Whether to sign the DMG or not. Signing is not required and will lead to unwanted errors in combination with notarization requirements.",
          "type": "boolean"
        },
        "title": {
          "default": "${productName} ${version}",
          "description": "The title of the produced DMG, which will be shown when mounted (volume name).\n\nMacro `${productName}`, `${version}` and `${name}` are supported.",
          "type": [
            "null",
            "string"
          ]
        },
        "window": {
          "$ref": "#/definitions/DmgWindow",
          "description": "The DMG window position and size. With y co-ordinates running from bottom to top.\n\nThe Finder makes sure that the window will be on the userâ€™s display, so if you want your window at the top left of the display you could use `\"x\": 0, \"y\": 100000` as the x, y co-ordinates.\nIt is not to be possible to position the window relative to the [top left](https://github.com/electron-userland/electron-builder/issues/3990#issuecomment-512960957) or relative to the center of the userâ€™s screen."
        },
        "writeUpdateInfo": {
          "default": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DmgWindow": {
      "additionalProperties": false,
      "properties": {
        "height": {
          "description": "The height. Defaults to background image height or 380.",
          "type": "number"
        },
        "width": {
          "description": "The width. Defaults to background image width or 540.",
          "type": "number"
        },
        "x": {
          "default": 400,
          "description": "The X position relative to left of the screen.",
          "type": "number"
        },
        "y": {
          "default": 100,
          "description": "The Y position relative to bottom of the screen.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ElectronBrandingOptions": {
      "additionalProperties": false,
      "description": "Electron distributables branding options.",
      "properties": {
        "productName": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ElectronDownloadOptions": {
      "additionalProperties": false,
      "properties": {
        "arch": {
          "type": "string"
        },
        "cache": {
          "description": "The [cache location](https://github.com/electron-userland/electron-download#cache-location).",
          "type": [
            "null",
            "string"
          ]
        },
        "customDir": {
          "type": [
            "null",
            "string"
          ]
        },
        "customFilename": {
          "type": [
            "null",
            "string"
          ]
        },
        "isVerifyChecksum": {
          "type": "boolean"
        },
        "mirror": {
          "description": "The mirror.",
          "type": [
            "null",
            "string"
          ]
        },
        "platform": {
          "enum": [
            "darwin",
            "linux",
            "mas",
            "win32"
          ],
          "type": "string"
        },
        "strictSSL": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FileAssociation": {
      "additionalProperties": false,
      "description": "File associations.\n\nmacOS (corresponds to [CFBundleDocumentTypes](https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685)) and NSIS only.\n\nOn Windows works only if [nsis.perMachine](https://electron.build/configuration/configuration#NsisOptions-perMachine) is set to `true`.",
      "properties": {
        "description": {
          "description": "*windows-only.* The description.",
          "type": [
            "null",
            "string"
          ]
        },
        "ext": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "The extension (minus the leading period). e.g. `png`."
        },
        "icon": {
          "description": "The path to icon (`.icns` for MacOS and `.ico` for Windows), relative to `build` (build resources directory). Defaults to `${firstExt}.icns`/`${firstExt}.ico` (if several extensions specified, first is used) or to application icon.\n\nNot supported on Linux, file issue if need (default icon will be `x-office-document`).",
          "type": [
            "null",
            "string"
          ]
        },
        "isPackage": {
          "description": "*macOS-only* Whether the document is distributed as a bundle. If set to true, the bundle directory is treated as a file. Corresponds to `LSTypeIsPackage`.",
          "type": "boolean"
        },
        "mimeType": {
          "description": "*linux-only.* The mime-type.",
          "type": [
            "null",
            "string"
          ]
        },
        "name": {
          "description": "The name. e.g. `PNG`. Defaults to `ext`.",
          "type": [
            "null",
            "string"
          ]
        },
        "rank": {
          "default": "Default",
          "description": "*macOS-only* The appâ€™s rank with respect to the type. The value can be `Owner`, `Default`, `Alternate`, or `None`. Corresponds to `LSHandlerRank`.",
          "type": "string"
        },
        "role": {
          "default": "Editor",
          "description": "*macOS-only* The appâ€™s role with respect to the type. The value can be `Editor`, `Viewer`, `Shell`, or `None`. Corresponds to `CFBundleTypeRole`.",
          "type": "string"
        }
      },
      "required": [
        "ext"
      ],
      "type": "object"
    },
    "FileSet": {
      "additionalProperties": false,
      "properties": {
        "filter": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "The [glob patterns](/file-patterns)."
        },
        "from": {
          "description": "The source path relative to the project directory.",
          "type": "string"
        },
        "to": {
          "description": "The destination path relative to the app's content directory for `extraFiles` and the app's resource directory for `extraResources`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GenericServerOptions": {
      "additionalProperties": false,
      "description": "Generic (any HTTP(S) server) options.\nIn all publish options [File Macros](/file-patterns#file-macros) are supported.",
      "properties": {
        "channel": {
          "default": "latest",
          "description": "The channel.",
          "type": [
            "null",
            "string"
          ]
        },
        "provider": {
          "description": "The provider. Must be `generic`.",
          "enum": [
            "generic"
          ],
          "type": "string"
        },
        "publishAutoUpdate": {
          "default": true,
          "description": "Whether to publish auto update info files.\n\nAuto update relies only on the first provider in the list (you can specify several publishers).\nThus, probably, there`s no need to upload the metadata files for the other configured providers. But by default will be uploaded.",
          "type": "boolean"
        },
        "publisherName": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ]
        },
        "requestHeaders": {
          "$ref": "#/definitions/OutgoingHttpHeaders",
          "description": "Any custom request headers"
        },
        "updaterCacheDirName": {
          "type": [
            "null",
            "string"
          ]
        },
        "url": {
          "description": "The base url. e.g. `https://bucket_name.s3.amazonaws.com`.",
          "type": "string"
        },
        "useMultipleRangeRequest": {
          "description": "Whether to use multiple range requests for differential update. Defaults to `true` if `url` doesn't contain `s3.amazonaws.com`.",
          "type": "boolean"
        }
      },
      "required": [
        "provider",
        "url"
      ],
      "type": "object"
    },
    "LinuxConfiguration": {
      "additionalProperties": false,
      "properties": {
        "appId": {
          "default": "com.electron.${name}",
          "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
          "type": [
            "null",
            "string"
          ]
        },
        "artifactName": {
          "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
          "type": [
            "null",
            "string"
          ]
        },
        "asar": {
          "anyOf": [
            {
              "$ref": "#/definitions/AsarOptions"
            },
            {
              "type": [
                "null",
                "boolean"
              ]
            }
          ],
          "default": true,
          "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work."
        },
        "asarUnpack": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive."
        },
        "category": {
          "description": "The [application category](https://specifications.freedesktop.org/menu-spec/latest/apa.html#main-category-registry).",
          "type": [
            "null",
            "string"
          ]
        },
        "compression": {
          "anyOf": [
            {
              "enum": [
                "maximum",
                "normal",
                "store"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": "normal",
          "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time."
        },
        "cscKeyPassword": {
          "type": [
            "null",
            "string"
          ]
        },
        "cscLink": {
          "type": [
            "null",
            "string"
          ]
        },
        "defaultArch": {
          "type": "string"
        },
        "description": {
          "description": "As [description](/configuration/configuration#Metadata-description) from application package.json, but allows you to specify different for Linux.",
          "type": [
            "null",
            "string"
          ]
        },
        "desktop": {
          "description": "The [Desktop file](https://developer.gnome.org/integration-guide/stable/desktop-files.html.en) entries (name to value)."
        },
        "detectUpdateChannel": {
          "default": true,
          "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
          "type": "boolean"
        },
        "electronUpdaterCompatibility": {
          "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
          "type": [
            "null",
            "string"
          ]
        },
        "executableArgs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "description": "The executable parameters. Pass to executableName"
        },
        "executableName": {
          "description": "The executable name. Defaults to `productName`.",
          "type": [
            "null",
            "string"
          ]
        },
        "extraFiles": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "extraResources": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "fileAssociations": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileAssociation"
            },
            {
              "items": {
                "$ref": "#/definitions/FileAssociation"
              },
              "type": "array"
            }
          ],
          "description": "The file associations."
        },
        "files": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "forceCodeSigning": {
          "description": "Whether to fail if app will be not code signed.",
          "type": "boolean"
        },
        "generateUpdatesFilesForAllChannels": {
          "default": false,
          "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
          "type": "boolean"
        },
        "icon": {
          "description": "The path to icon set directory or one png file, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory. The icon filename must contain the size (e.g. 32x32.png) of the icon.\nBy default will be generated automatically based on the macOS icns file.",
          "type": "string"
        },
        "maintainer": {
          "description": "The maintainer. Defaults to [author](/configuration/configuration#Metadata-author).",
          "type": [
            "null",
            "string"
          ]
        },
        "mimeTypes": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "description": "The mime types in addition to specified in the file associations. Use it if you don't want to register a new mime type, but reuse existing."
        },
        "packageCategory": {
          "description": "backward compatibility + to allow specify fpm-only category for all possible fpm targets in one place",
          "type": [
            "null",
            "string"
          ]
        },
        "protocols": {
          "anyOf": [
            {
              "$ref": "#/definitions/Protocol"
            },
            {
              "items": {
                "$ref": "#/definitions/Protocol"
              },
              "type": "array"
            }
          ],
          "description": "The URL protocol schemes."
        },
        "publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/GenericServerOptions"
            },
            {
              "$ref": "#/definitions/CustomPublishOptions"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GenericServerOptions"
                  },
                  {
                    "$ref": "#/definitions/CustomPublishOptions"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "releaseInfo": {
          "$ref": "#/definitions/ReleaseInfo",
          "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```"
        },
        "synopsis": {
          "description": "The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).",
          "type": [
            "null",
            "string"
          ]
        },
        "target": {
          "anyOf": [
            {
              "$ref": "#/definitions/TargetConfiguration"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/TargetConfiguration"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "default": "AppImage",
          "description": "Target package type: list of `AppImage`, `snap`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\n\nelectron-builder [docker image](/multi-platform-build#docker) can be used to build Linux targets on any platform.\n\nPlease [do not put an AppImage into another archive](https://github.com/probonopd/AppImageKit/wiki/Creating-AppImages#common-mistake) like a .zip or .tar.gz."
        },
        "vendor": {
          "description": "The vendor. Defaults to [author](/configuration/configuration#Metadata-author).",
          "type": [
            "null",
            "string"
          ]
        }
      },
      "type": "object"
    },
    "MacConfiguration": {
      "additionalProperties": false,
      "properties": {
        "appId": {
          "default": "com.electron.${name}",
          "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
          "type": [
            "null",
            "string"
          ]
        },
        "artifactName": {
          "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
          "type": [
            "null",
            "string"
          ]
        },
        "asar": {
          "anyOf": [
            {
              "$ref": "#/definitions/AsarOptions"
            },
            {
              "type": [
                "null",
                "boolean"
              ]
            }
          ],
          "default": true,
          "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work."
        },
        "asarUnpack": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive."
        },
        "binaries": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "description": "Paths of any extra binaries that need to be signed."
        },
        "bundleShortVersion": {
          "description": "The `CFBundleShortVersionString`. Do not use it unless you need to.",
          "type": [
            "null",
            "string"
          ]
        },
        "bundleVersion": {
          "description": "The `CFBundleVersion`. Do not use it unless [you need to](https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643).",
          "type": [
            "null",
            "string"
          ]
        },
        "category": {
          "description": "The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\nFor example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\nValid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).",
          "type": [
            "null",
            "string"
          ]
        },
        "compression": {
          "anyOf": [
            {
              "enum": [
                "maximum",
                "normal",
                "store"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": "normal",
          "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time."
        },
        "cscInstallerKeyPassword": {
          "type": [
            "null",
            "string"
          ]
        },
        "cscInstallerLink": {
          "type": [
            "null",
            "string"
          ]
        },
        "cscKeyPassword": {
          "type": [
            "null",
            "string"
          ]
        },
        "cscLink": {
          "type": [
            "null",
            "string"
          ]
        },
        "darkModeSupport": {
          "default": false,
          "description": "Whether a dark mode is supported. If your app does have a dark mode, you can make your app follow the system-wide dark mode setting.",
          "type": "boolean"
        },
        "defaultArch": {
          "type": "string"
        },
        "detectUpdateChannel": {
          "default": true,
          "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
          "type": "boolean"
        },
        "electronLanguages": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "The electron locales. By default Electron locales used as is."
        },
        "electronUpdaterCompatibility": {
          "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
          "type": [
            "null",
            "string"
          ]
        },
        "entitlements": {
          "description": "The path to entitlements file for signing the app. `build/entitlements.mac.plist` will be used if exists (it is a recommended way to set).\nMAS entitlements is specified in the [mas](/configuration/mas).",
          "type": [
            "null",
            "string"
          ]
        },
        "entitlementsInherit": {
          "description": "The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mac.inherit.plist` will be used if exists (it is a recommended way to set).\nOtherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist).\n\nThis option only applies when signing with `entitlements` provided.",
          "type": [
            "null",
            "string"
          ]
        },
        "entitlementsLoginHelper": {
          "description": "Path to login helper entitlement file.\nWhen using App Sandbox, the the `com.apple.security.inherit` key that is normally in the inherited entitlements cannot be inherited since the login helper is a standalone executable.\nDefaults to the value provided for `entitlements`. This option only applies when signing with `entitlements` provided.",
          "type": [
            "null",
            "string"
          ]
        },
        "executableName": {
          "description": "The executable name. Defaults to `productName`.",
          "type": [
            "null",
            "string"
          ]
        },
        "extendInfo": {
          "description": "The extra entries for `Info.plist`."
        },
        "extraDistFiles": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "description": "Extra files to put in archive. Not applicable for `tar.*`."
        },
        "extraFiles": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "extraResources": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "fileAssociations": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileAssociation"
            },
            {
              "items": {
                "$ref": "#/definitions/FileAssociation"
              },
              "type": "array"
            }
          ],
          "description": "The file associations."
        },
        "files": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "forceCodeSigning": {
          "description": "Whether to fail if app will be not code signed.",
          "type": "boolean"
        },
        "gatekeeperAssess": {
          "default": false,
          "description": "Whether to let electron-osx-sign validate the signing or not.",
          "type": "boolean"
        },
        "generateUpdatesFilesForAllChannels": {
          "default": false,
          "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
          "type": "boolean"
        },
        "hardenedRuntime": {
          "default": true,
          "description": "Whether your app has to be signed with hardened runtime.",
          "type": "boolean"
        },
        "helperBundleId": {
          "default": "${appBundleIdentifier}.helper",
          "description": "The bundle identifier to use in the application helper's plist.",
          "type": [
            "null",
            "string"
          ]
        },
        "helperEHBundleId": {
          "default": "${appBundleIdentifier}.helper.EH",
          "description": "The bundle identifier to use in the EH helper's plist.",
          "type": [
            "null",
            "string"
          ]
        },
        "helperGPUBundleId": {
          "default": "${appBundleIdentifier}.helper.GPU",
          "description": "The bundle identifier to use in the GPU helper's plist.",
          "type": [
            "null",
            "string"
          ]
        },
        "helperNPBundleId": {
          "default": "${appBundleIdentifier}.helper.NP",
          "description": "The bundle identifier to use in the NP helper's plist.",
          "type": [
            "null",
            "string"
          ]
        },
        "helperPluginBundleId": {
          "default": "${appBundleIdentifier}.helper.Plugin",
          "description": "The bundle identifier to use in the Plugin helper's plist.",
          "type": [
            "null",
            "string"
          ]
        },
        "helperRendererBundleId": {
          "default": "${appBundleIdentifier}.helper.Renderer",
          "description": "The bundle identifier to use in the Renderer helper's plist.",
          "type": [
            "null",
            "string"
          ]
        },
        "icon": {
          "default": "build/icon.icns",
          "description": "The path to application icon.",
          "type": [
            "null",
            "string"
          ]
        },
        "identity": {
          "description": "The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](/code-signing) instead of specifying this option.\nMAS installer identity is specified in the [mas](/configuration/mas).",
          "type": [
            "null",
            "string"
          ]
        },
        "minimumSystemVersion": {
          "description": "The minimum version of macOS required for the app to run. Corresponds to `LSMinimumSystemVersion`.",
          "type": [
            "null",
            "string"
          ]
        },
        "protocols": {
          "anyOf": [
            {
              "$ref": "#/definitions/Protocol"
            },
            {
              "items": {
                "$ref": "#/definitions/Protocol"
              },
              "type": "array"
            }
          ],
          "description": "The URL protocol schemes."
        },
        "provisioningProfile": {
          "description": "The path to the provisioning profile to use when signing, absolute or relative to the app root.",
          "type": [
            "null",
            "string"
          ]
        },
        "publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/GenericServerOptions"
            },
            {
              "$ref": "#/definitions/CustomPublishOptions"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GenericServerOptions"
                  },
                  {
                    "$ref": "#/definitions/CustomPublishOptions"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "releaseInfo": {
          "$ref": "#/definitions/ReleaseInfo",
          "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```"
        },
        "requirements": {
          "description": "Path of [requirements file](https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html) used in signing. Not applicable for MAS.",
          "type": [
            "null",
            "string"
          ]
        },
        "signIgnore": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "description": "Regex or an array of regex's that signal skipping signing a file."
        },
        "strictVerify": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "string",
                "boolean"
              ]
            }
          ],
          "default": true,
          "description": "Whether to let electron-osx-sign verify the contents or not."
        },
        "target": {
          "anyOf": [
            {
              "$ref": "#/definitions/TargetConfiguration"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/TargetConfiguration"
                  },
                  {
                    "enum": [
                      "7z",
                      "default",
                      "dir",
                      "dmg",
                      "mas",
                      "mas-dev",
                      "pkg",
                      "tar.bz2",
                      "tar.gz",
                      "tar.lz",
                      "tar.xz",
                      "zip"
                    ],
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "enum": [
                "7z",
                "default",
                "dir",
                "dmg",
                "mas",
                "mas-dev",
                "pkg",
                "tar.bz2",
                "tar.gz",
                "tar.lz",
                "tar.xz",
                "zip"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "The target package type: list of `default`, `dmg`, `mas`, `mas-dev`, `pkg`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`. Defaults to `default` (dmg and zip for Squirrel.Mac)."
        },
        "timestamp": {
          "description": "Specify the URL of the timestamp authority server",
          "type": [
            "null",
            "string"
          ]
        },
        "type": {
          "anyOf": [
            {
              "enum": [
                "development",
                "distribution"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": "distribution",
          "description": "Whether to sign app for development or for distribution."
        }
      },
      "type": "object"
    },
    "MetadataDirectories": {
      "additionalProperties": false,
      "properties": {
        "app": {
          "description": "The application directory (containing the application package.json), defaults to `app`, `www` or working directory.",
          "type": [
            "null",
            "string"
          ]
        },
        "buildResources": {
          "default": "build",
          "description": "The path to build resources.\n\nPlease note â€” build resources are not packed into the app. If you need to use some files, e.g. as tray icon, please include required files explicitly: `\"files\": [\"**\\/*\", \"build/icon.*\"]`",
          "type": [
            "null",
            "string"
          ]
        },
        "output": {
          "default": "dist",
          "description": "The output directory. [File macros](/file-patterns#file-macros) are supported.",
          "type": [
            "null",
            "string"
          ]
        }
      },
      "type": "object"
    },
    "MsiOptions": {
      "additionalProperties": false,
      "properties": {
        "additionalWixArgs": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "description": "Any additional arguments to be passed to the WiX installer compiler, such as `[\"-ext\", \"WixUtilExtension\"]`"
        },
        "artifactName": {
          "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
          "type": [
            "null",
            "string"
          ]
        },
        "createDesktopShortcut": {
          "default": true,
          "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
          "enum": [
            "always",
            false,
            true
          ]
        },
        "createStartMenuShortcut": {
          "default": true,
          "description": "Whether to create start menu shortcut.",
          "type": "boolean"
        },
        "iconId": {
          "description": "The [shortcut iconId](https://wixtoolset.org/documentation/manual/v4/reference/wxs/shortcut/). Optional, by default generated using app file name.",
          "type": "string"
        },
        "menuCategory": {
          "default": false,
          "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
          "type": [
            "string",
            "boolean"
          ]
        },
        "oneClick": {
          "default": true,
          "description": "One-click installation.",
          "type": "boolean"
        },
        "perMachine": {
          "default": false,
          "description": "Whether to install per all users (per-machine).",
          "type": "boolean"
        },
        "publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/GenericServerOptions"
            },
            {
              "$ref": "#/definitions/CustomPublishOptions"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GenericServerOptions"
                  },
                  {
                    "$ref": "#/definitions/CustomPublishOptions"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "runAfterFinish": {
          "default": true,
          "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
          "type": "boolean"
        },
        "shortcutName": {
          "description": "The name that will be used for all shortcuts. Defaults to the application name.",
          "type": [
            "null",
            "string"
          ]
        },
        "upgradeCode": {
          "description": "The [upgrade code](https://msdn.microsoft.com/en-us/library/windows/desktop/aa372375(v=vs.85).aspx). Optional, by default generated using app id.",
          "type": [
            "null",
            "string"
          ]
        },
        "warningsAsErrors": {
          "default": true,
          "description": "If `warningsAsErrors` is `true` (default): treat warnings as errors. If `warningsAsErrors` is `false`: allow warnings.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "NsisOptions": {
      "additionalProperties": false,
      "properties": {
        "allowElevation": {
          "default": true,
          "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
          "type": "boolean"
        },
        "allowToChangeInstallationDirectory": {
          "default": false,
          "description": "*assisted installer only.* Whether to allow user to change installation directory.",
          "type": "boolean"
        },
        "artifactName": {
          "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Setup ${version}.${ext}`.",
          "type": [
            "null",
            "string"
          ]
        },
        "createDesktopShortcut": {
          "default": true,
          "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
          "enum": [
            "always",
            false,
            true
          ]
        },
        "createStartMenuShortcut": {
          "default": true,
          "description": "Whether to create start menu shortcut.",
          "type": "boolean"
        },
        "customNsisBinary": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomNsisBinary"
            },
            {
              "type": "null"
            }
          ]
        },
        "debugLogging": {
          "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
          "type": [
            "null",
            "boolean"
          ]
        },
        "deleteAppDataOnUninstall": {
          "default": false,
          "description": "*one-click installer only.* Whether to delete app data on uninstall.",
          "type": "boolean"
        },
        "differentialPackage": {
          "type": "boolean"
        },
        "displayLanguageSelector": {
          "default": false,
          "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
          "type": "boolean"
        },
        "guid": {
          "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
          "type": [
            "null",
            "string"
          ]
        },
        "include": {
          "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
          "type": [
            "null",
            "string"
          ]
        },
        "installerHeader": {
          "default": "build/installerHeader.bmp",
          "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
          "type": [
            "null",
            "string"
          ]
        },
        "installerHeaderIcon": {
          "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
          "type": [
            "null",
            "string"
          ]
        },
        "installerIcon": {
          "description": "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
          "type": [
            "null",
            "string"
          ]
        },
        "installerLanguages": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what."
        },
        "installerSidebar": {
          "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 Ã— 314 pixels.",
          "type": [
            "null",
            "string"
          ]
        },
        "language": {
          "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
          "type": [
            "null",
            "string"
          ]
        },
        "license": {
          "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported â€” use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.",
          "type": [
            "null",
            "string"
          ]
        },
        "menuCategory": {
          "default": false,
          "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
          "type": [
            "string",
            "boolean"
          ]
        },
        "multiLanguageInstaller": {
          "description": "Whether to create multi-language installer. Defaults to `unicode` option value.",
          "type": "boolean"
        },
        "oneClick": {
          "default": true,
          "description": "Whether to create one-click installer or assisted.",
          "type": "boolean"
        },
        "perMachine": {
          "default": false,
          "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
          "type": "boolean"
        },
        "preCompressedFileExtensions": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "default": [
            ".avi",
            ".mov",
            ".m4v",
            ".mp4",
            ".m4p",
            ".qt",
            ".mkv",
            ".webm",
            ".vmdk"
          ],
          "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files."
        },
        "publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/GenericServerOptions"
            },
            {
              "$ref": "#/definitions/CustomPublishOptions"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GenericServerOptions"
                  },
                  {
                    "$ref": "#/definitions/CustomPublishOptions"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "runAfterFinish": {
          "default": true,
          "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
          "type": "boolean"
        },
        "script": {
          "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
          "type": [
            "null",
            "string"
          ]
        },
        "shortcutName": {
          "description": "The name that will be used for all shortcuts. Defaults to the application name.",
          "type": [
            "null",
            "string"
          ]
        },
        "unicode": {
          "default": true,
          "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
          "type": "boolean"
        },
        "uninstallDisplayName": {
          "default": "${productName} ${version}",
          "description": "The uninstaller display name in the control panel.",
          "type": "string"
        },
        "uninstallExecutableName": {
          "default": "${productName} ${version}",
          "description": "The uninstaller display name in the control panel.",
          "type": "string"
        },
        "uninstallerIcon": {
          "description": "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
          "type": [
            "null",
            "string"
          ]
        },
        "uninstallerSidebar": {
          "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
          "type": [
            "null",
            "string"
          ]
        },
        "useZip": {
          "default": false,
          "type": "boolean"
        },
        "warningsAsErrors": {
          "default": true,
          "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "NsisWebOptions": {
      "additionalProperties": false,
      "description": "Web Installer options.",
      "properties": {
        "allowElevation": {
          "default": true,
          "description": "*assisted installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.",
          "type": "boolean"
        },
        "allowToChangeInstallationDirectory": {
          "default": false,
          "description": "*assisted installer only.* Whether to allow user to change installation directory.",
          "type": "boolean"
        },
        "appPackageUrl": {
          "description": "The application package download URL. Optional â€” by default computed using publish configuration.\n\nURL like `https://example.com/download/latest` allows web installer to be version independent (installer will download latest application package).\nPlease note â€” it is [full URL](https://github.com/electron-userland/electron-builder/issues/1810#issuecomment-317650878).\n\nCustom `X-Arch` http header is set to `32` or `64`.",
          "type": [
            "null",
            "string"
          ]
        },
        "artifactName": {
          "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName} Web Setup ${version}.${ext}`.",
          "type": [
            "null",
            "string"
          ]
        },
        "createDesktopShortcut": {
          "default": true,
          "description": "Whether to create desktop shortcut. Set to `always` if to recreate also on reinstall (even if removed by user).",
          "enum": [
            "always",
            false,
            true
          ]
        },
        "createStartMenuShortcut": {
          "default": true,
          "description": "Whether to create start menu shortcut.",
          "type": "boolean"
        },
        "customNsisBinary": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomNsisBinary"
            },
            {
              "type": "null"
            }
          ]
        },
        "debugLogging": {
          "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
          "type": [
            "null",
            "boolean"
          ]
        },
        "deleteAppDataOnUninstall": {
          "default": false,
          "description": "*one-click installer only.* Whether to delete app data on uninstall.",
          "type": "boolean"
        },
        "differentialPackage": {
          "type": "boolean"
        },
        "displayLanguageSelector": {
          "default": false,
          "description": "Whether to display a language selection dialog. Not recommended (by default will be detected using OS language).",
          "type": "boolean"
        },
        "guid": {
          "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
          "type": [
            "null",
            "string"
          ]
        },
        "include": {
          "description": "The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](#custom-nsis-script).",
          "type": [
            "null",
            "string"
          ]
        },
        "installerHeader": {
          "default": "build/installerHeader.bmp",
          "description": "*assisted installer only.* `MUI_HEADERIMAGE`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.",
          "type": [
            "null",
            "string"
          ]
        },
        "installerHeaderIcon": {
          "description": "*one-click installer only.* The path to header icon (above the progress bar), relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerHeaderIcon.ico` or application icon.",
          "type": [
            "null",
            "string"
          ]
        },
        "installerIcon": {
          "description": "The path to installer icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerIcon.ico` or application icon.",
          "type": [
            "null",
            "string"
          ]
        },
        "installerLanguages": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "description": "The installer languages (e.g. `en_US`, `de_DE`). Change only if you understand what do you do and for what."
        },
        "installerSidebar": {
          "description": "*assisted installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`. Image size 164 Ã— 314 pixels.",
          "type": [
            "null",
            "string"
          ]
        },
        "language": {
          "description": "[LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).",
          "type": [
            "null",
            "string"
          ]
        },
        "license": {
          "description": "The path to EULA license file. Defaults to `license.txt` or `eula.txt` (or uppercase variants). In addition to `txt, `rtf` and `html` supported (don't forget to use `target=\"_blank\"` for links).\n\nMultiple license files in different languages are supported â€” use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\nIf OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n\nAppropriate license file will be selected by user OS language.",
          "type": [
            "null",
            "string"
          ]
        },
        "menuCategory": {
          "default": false,
          "description": "Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.",
          "type": [
            "string",
            "boolean"
          ]
        },
        "multiLanguageInstaller": {
          "description": "Whether to create multi-language installer. Defaults to `unicode` option value.",
          "type": "boolean"
        },
        "oneClick": {
          "default": true,
          "description": "Whether to create one-click installer or assisted.",
          "type": "boolean"
        },
        "perMachine": {
          "default": false,
          "description": "Whether to show install mode installer page (choice per-machine or per-user) for assisted installer. Or whether installation always per all users (per-machine).\n\nIf `oneClick` is `true` (default): Whether to install per all users (per-machine).\n\nIf `oneClick` is `false` and `perMachine` is `true`: no install mode installer page, always install per-machine.\n\nIf `oneClick` is `false` and `perMachine` is `false` (default): install mode installer page.",
          "type": "boolean"
        },
        "preCompressedFileExtensions": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "default": [
            ".avi",
            ".mov",
            ".m4v",
            ".mp4",
            ".m4p",
            ".qt",
            ".mkv",
            ".webm",
            ".vmdk"
          ],
          "description": "The file extension of files that will be not compressed. Applicable only for `extraResources` and `extraFiles` files."
        },
        "publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/GenericServerOptions"
            },
            {
              "$ref": "#/definitions/CustomPublishOptions"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GenericServerOptions"
                  },
                  {
                    "$ref": "#/definitions/CustomPublishOptions"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "runAfterFinish": {
          "default": true,
          "description": "Whether to run the installed application after finish. For assisted installer corresponding checkbox will be removed.",
          "type": "boolean"
        },
        "script": {
          "description": "The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](#custom-nsis-script).",
          "type": [
            "null",
            "string"
          ]
        },
        "shortcutName": {
          "description": "The name that will be used for all shortcuts. Defaults to the application name.",
          "type": [
            "null",
            "string"
          ]
        },
        "unicode": {
          "default": true,
          "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
          "type": "boolean"
        },
        "uninstallDisplayName": {
          "default": "${productName} ${version}",
          "description": "The uninstaller display name in the control panel.",
          "type": "string"
        },
        "uninstallExecutableName": {
          "default": "${productName} ${version}",
          "description": "The uninstaller display name in the control panel.",
          "type": "string"
        },
        "uninstallerIcon": {
          "description": "The path to uninstaller icon, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `build/uninstallerIcon.ico` or application icon.",
          "type": [
            "null",
            "string"
          ]
        },
        "uninstallerSidebar": {
          "description": "*assisted installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the [build resources](/configuration/configuration#MetadataDirectories-buildResources) or to the project directory.\nDefaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`",
          "type": [
            "null",
            "string"
          ]
        },
        "useZip": {
          "default": false,
          "type": "boolean"
        },
        "warningsAsErrors": {
          "default": true,
          "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "OutgoingHttpHeaders": {
      "additionalProperties": false,
      "type": "object"
    },
    "PortableOptions": {
      "additionalProperties": false,
      "description": "Portable options.",
      "properties": {
        "artifactName": {
          "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template).",
          "type": [
            "null",
            "string"
          ]
        },
        "customNsisBinary": {
          "anyOf": [
            {
              "$ref": "#/definitions/CustomNsisBinary"
            },
            {
              "type": "null"
            }
          ]
        },
        "debugLogging": {
          "description": "Whether or not to enable NSIS logging for debugging.\nNote: Requires a debug-enabled NSIS build.\nelectron-builder's included `makensis` only supports building debug-enabled NSIS installers on Windows currently\nhttps://github.com/electron-userland/electron-builder/issues/5119#issuecomment-811353612",
          "type": [
            "null",
            "boolean"
          ]
        },
        "guid": {
          "description": "See [GUID vs Application Name](../configuration/nsis#guid-vs-application-name).",
          "type": [
            "null",
            "string"
          ]
        },
        "publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/GenericServerOptions"
            },
            {
              "$ref": "#/definitions/CustomPublishOptions"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GenericServerOptions"
                  },
                  {
                    "$ref": "#/definitions/CustomPublishOptions"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "requestExecutionLevel": {
          "default": "user",
          "description": "The [requested execution level](http://nsis.sourceforge.net/Reference/RequestExecutionLevel) for Windows.",
          "enum": [
            "admin",
            "highest",
            "user"
          ],
          "type": "string"
        },
        "splashImage": {
          "description": "The image to show while the portable executable is extracting. This image must be a bitmap (`.bmp`) image.",
          "type": [
            "null",
            "string"
          ]
        },
        "unicode": {
          "default": true,
          "description": "Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).",
          "type": "boolean"
        },
        "unpackDirName": {
          "description": "The unpack directory for the portable app resources.\n\nIf set to a string, it will be the name in [TEMP](https://www.askvg.com/where-does-windows-store-temporary-files-and-how-to-change-temp-folder-location/) directory\nIf set explicitly to `false`, it will use the Windows temp directory ($PLUGINSDIR) that is unique to each launch of the portable application.\n\nDefaults to [uuid](https://github.com/segmentio/ksuid) of build (changed on each build of portable executable).",
          "type": [
            "string",
            "boolean"
          ]
        },
        "useZip": {
          "default": false,
          "type": "boolean"
        },
        "warningsAsErrors": {
          "default": true,
          "description": "If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Protocol": {
      "additionalProperties": false,
      "description": "URL Protocol Schemes. Protocols to associate the app with. macOS only.\n\nPlease note â€” on macOS [you need to register an `open-url` event handler](http://electron.atom.io/docs/api/app/#event-open-url-macos).",
      "properties": {
        "name": {
          "description": "The name. e.g. `IRC server URL`.",
          "type": "string"
        },
        "role": {
          "default": "Editor",
          "description": "*macOS-only* The appâ€™s role with respect to the type.",
          "enum": [
            "Editor",
            "None",
            "Shell",
            "Viewer"
          ],
          "type": "string"
        },
        "schemes": {
          "description": "The schemes. e.g. `[\"irc\", \"ircs\"]`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "schemes"
      ],
      "type": "object"
    },
    "RawAppOptions": {
      "additionalProperties": false,
      "properties": {
        "metadata": {
          "additionalProperties": false,
          "description": "Metadata that would normally be in package.json, which may not exist in the raw app dir",
          "properties": {
            "author": {
              "$ref": "#/definitions/AuthorMetadata"
            },
            "dependencies": {
              "typeof": "function"
            },
            "description": {
              "description": "The application description.",
              "type": "string"
            },
            "homepage": {
              "description": "The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n\nIf not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.",
              "type": [
                "null",
                "string"
              ]
            },
            "license": {
              "description": "*linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.",
              "type": [
                "null",
                "string"
              ]
            },
            "main": {
              "type": [
                "null",
                "string"
              ]
            },
            "name": {
              "description": "The application name.",
              "type": "string"
            },
            "productName": {
              "type": [
                "null",
                "string"
              ]
            },
            "repository": {
              "anyOf": [
                {
                  "$ref": "#/definitions/RepositoryInfo"
                },
                {
                  "type": [
                    "null",
                    "string"
                  ]
                }
              ],
              "description": "The [repository](https://docs.npmjs.com/files/package.json#repository)."
            },
            "shortVersion": {
              "type": [
                "null",
                "string"
              ]
            },
            "shortVersionWindows": {
              "type": [
                "null",
                "string"
              ]
            },
            "version": {
              "type": "string"
            }
          },
          "required": [
            "author",
            "name",
            "version"
          ],
          "type": "object"
        },
        "primaryExecutablePath": {
          "description": "`null` indicates no executable (i.e. an auxiliary files installer)",
          "type": [
            "null",
            "string"
          ]
        }
      },
      "required": [
        "metadata",
        "primaryExecutablePath"
      ],
      "type": "object"
    },
    "ReleaseInfo": {
      "additionalProperties": false,
      "properties": {
        "releaseDate": {
          "description": "The release date.",
          "type": "string"
        },
        "releaseName": {
          "description": "The release name.",
          "type": [
            "null",
            "string"
          ]
        },
        "releaseNotes": {
          "description": "The release notes.",
          "type": [
            "null",
            "string"
          ]
        },
        "releaseNotesFile": {
          "description": "The path to release notes file. Defaults to `release-notes-${platform}.md` (where `platform` it is current platform â€” `mac`, `linux` or `windows`) or `release-notes.md` in the [build resources](#MetadataDirectories-buildResources).",
          "type": [
            "null",
            "string"
          ]
        }
      },
      "type": "object"
    },
    "RepositoryInfo": {
      "additionalProperties": false,
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "TargetConfiguration": {
      "additionalProperties": false,
      "properties": {
        "arch": {
          "anyOf": [
            {
              "items": {
                "enum": [
                  "arm64",
                  "armv7l",
                  "ia32",
                  "universal",
                  "x64"
                ],
                "type": "string"
              },
              "type": "array"
            },
            {
              "enum": [
                "arm64",
                "armv7l",
                "ia32",
                "universal",
                "x64"
              ],
              "type": "string"
            }
          ],
          "description": "The arch or list of archs."
        },
        "target": {
          "description": "The target name. e.g. `snap`.",
          "type": "string"
        }
      },
      "required": [
        "target"
      ],
      "type": "object"
    },
    "WindowsConfiguration": {
      "additionalProperties": false,
      "properties": {
        "additionalCertificateFile": {
          "description": "The path to an additional certificate file you want to add to the signature block.",
          "type": [
            "null",
            "string"
          ]
        },
        "appId": {
          "default": "com.electron.${name}",
          "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
          "type": [
            "null",
            "string"
          ]
        },
        "artifactName": {
          "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
          "type": [
            "null",
            "string"
          ]
        },
        "asar": {
          "anyOf": [
            {
              "$ref": "#/definitions/AsarOptions"
            },
            {
              "type": [
                "null",
                "boolean"
              ]
            }
          ],
          "default": true,
          "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work."
        },
        "asarUnpack": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive."
        },
        "certificateFile": {
          "description": "The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason.\nPlease see [Code Signing](/code-signing).",
          "type": [
            "null",
            "string"
          ]
        },
        "certificatePassword": {
          "description": "The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason.\nPlease see [Code Signing](/code-signing).",
          "type": [
            "null",
            "string"
          ]
        },
        "certificateSha1": {
          "description": "The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
          "type": [
            "null",
            "string"
          ]
        },
        "certificateSubjectName": {
          "description": "The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows (or on macOS if [Parallels Desktop](https://www.parallels.com/products/desktop/) Windows 10 virtual machines exits).",
          "type": [
            "null",
            "string"
          ]
        },
        "compression": {
          "anyOf": [
            {
              "enum": [
                "maximum",
                "normal",
                "store"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": "normal",
          "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time."
        },
        "cscKeyPassword": {
          "type": [
            "null",
            "string"
          ]
        },
        "cscLink": {
          "type": [
            "null",
            "string"
          ]
        },
        "defaultArch": {
          "type": "string"
        },
        "detectUpdateChannel": {
          "default": true,
          "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
          "type": "boolean"
        },
        "electronUpdaterCompatibility": {
          "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
          "type": [
            "null",
            "string"
          ]
        },
        "executableName": {
          "description": "The executable name. Defaults to `productName`.",
          "type": [
            "null",
            "string"
          ]
        },
        "extraFiles": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "extraResources": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "fileAssociations": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileAssociation"
            },
            {
              "items": {
                "$ref": "#/definitions/FileAssociation"
              },
              "type": "array"
            }
          ],
          "description": "The file associations."
        },
        "files": {
          "anyOf": [
            {
              "$ref": "#/definitions/FileSet"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FileSet"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "forceCodeSigning": {
          "description": "Whether to fail if app will be not code signed.",
          "type": "boolean"
        },
        "generateUpdatesFilesForAllChannels": {
          "default": false,
          "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
          "type": "boolean"
        },
        "icon": {
          "default": "build/icon.ico",
          "description": "The path to application icon.",
          "type": [
            "null",
            "string"
          ]
        },
        "legalTrademarks": {
          "description": "The trademarks and registered trademarks.",
          "type": [
            "null",
            "string"
          ]
        },
        "protocols": {
          "anyOf": [
            {
              "$ref": "#/definitions/Protocol"
            },
            {
              "items": {
                "$ref": "#/definitions/Protocol"
              },
              "type": "array"
            }
          ],
          "description": "The URL protocol schemes."
        },
        "publish": {
          "anyOf": [
            {
              "$ref": "#/definitions/GenericServerOptions"
            },
            {
              "$ref": "#/definitions/CustomPublishOptions"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GenericServerOptions"
                  },
                  {
                    "$ref": "#/definitions/CustomPublishOptions"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ]
        },
        "publisherName": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "description": "[The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided.\nDefaults to common name from your code signing certificate."
        },
        "releaseInfo": {
          "$ref": "#/definitions/ReleaseInfo",
          "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```"
        },
        "requestedExecutionLevel": {
          "anyOf": [
            {
              "enum": [
                "asInvoker",
                "highestAvailable",
                "requireAdministrator"
              ],
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": "asInvoker",
          "description": "The [security level](https://msdn.microsoft.com/en-us/library/6ad1fshk.aspx#Anchor_9) at which the application requests to be executed.\nCannot be specified per target, allowed only in the `win`."
        },
        "rfc3161TimeStampServer": {
          "default": "http://timestamp.digicert.com",
          "description": "The URL of the RFC 3161 time stamp server.",
          "type": [
            "null",
            "string"
          ]
        },
        "sign": {
          "anyOf": [
            {
              "typeof": "function"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "description": "The custom function (or path to file or module id) to sign Windows executable."
        },
        "signAndEditExecutable": {
          "default": true,
          "description": "Whether to sign and add metadata to executable. Advanced option.",
          "type": "boolean"
        },
        "signDlls": {
          "default": false,
          "description": "Whether to sign DLL files. Advanced option.",
          "type": "boolean"
        },
        "signingHashAlgorithms": {
          "anyOf": [
            {
              "items": {
                "enum": [
                  "sha1",
                  "sha256"
                ],
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": "['sha1', 'sha256']",
          "description": "Array of signing algorithms used. For AppX `sha256` is always used."
        },
        "target": {
          "anyOf": [
            {
              "$ref": "#/definitions/TargetConfiguration"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/TargetConfiguration"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "type": [
                "null",
                "string"
              ]
            }
          ],
          "default": "nsis",
          "description": "The target package type: list of `nsis`, `nsis-web` (Web installer), `portable` ([portable](/configuration/nsis#portable) app without installation), `appx`, `msi`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\nAppX package can be built only on Windows 10.\n\nTo use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency."
        },
        "timeStampServer": {
          "default": "http://timestamp.digicert.com",
          "description": "The URL of the time stamp server.",
          "type": [
            "null",
            "string"
          ]
        },
        "verifyUpdateCodeSignature": {
          "default": true,
          "description": "Whether to verify the signature of an available update before installation.\nThe [publisher name](#publisherName) will be used for the signature verification.",
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "description": "Configuration Options",
  "properties": {
    "afterAllArtifactBuild": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "The function (or path to file or module id) to be [run after all artifacts are build](#afterAllArtifactBuild)."
    },
    "afterPack": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "The function (or path to file or module id) to be [run after pack](#afterpack) (but before pack into distributable format and sign)."
    },
    "afterSign": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "The function (or path to file or module id) to be [run after pack and sign](#aftersign) (but before pack into distributable format)."
    },
    "appId": {
      "default": "com.electron.${name}",
      "description": "The application id. Used as [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n[Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows (NSIS target only, Squirrel.Windows not supported). It is strongly recommended that an explicit ID is set.",
      "type": [
        "null",
        "string"
      ]
    },
    "appImage": {
      "anyOf": [
        {
          "$ref": "#/definitions/AppImageOptions"
        },
        {
          "type": "null"
        }
      ],
      "description": "AppImage options."
    },
    "artifactBuildCompleted": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "The function (or path to file or module id) to be run on artifact build completed."
    },
    "artifactBuildStarted": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "The function (or path to file or module id) to be run on artifact build start."
    },
    "artifactName": {
      "description": "The [artifact file name template](/configuration/configuration#artifact-file-name-template). Defaults to `${productName}-${version}.${ext}` (some target can have other defaults, see corresponding options).",
      "type": [
        "null",
        "string"
      ]
    },
    "asar": {
      "anyOf": [
        {
          "$ref": "#/definitions/AsarOptions"
        },
        {
          "type": [
            "null",
            "boolean"
          ]
        }
      ],
      "default": true,
      "description": "Whether to package the application's source code into an archive, using [Electron's archive format](http://electron.atom.io/docs/tutorial/application-packaging/).\n\nNode modules, that must be unpacked, will be detected automatically, you don't need to explicitly set [asarUnpack](#configuration-asarUnpack) - please file an issue if this doesn't work."
    },
    "asarUnpack": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "A [glob patterns](/file-patterns) relative to the [app directory](#MetadataDirectories-app), which specifies which files to unpack when creating the [asar](http://electron.atom.io/docs/tutorial/application-packaging/) archive."
    },
    "beforeBuild": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "The function (or path to file or module id) to be run before dependencies are installed or rebuilt. Works when `npmRebuild` is set to `true`. Resolving to `false` will skip dependencies install or rebuild.\n\nIf provided and `node_modules` are missing, it will not invoke production dependencies check."
    },
    "beforePack": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "The function (or path to file or module id) to be [run before pack](#beforepack)"
    },
    "buildVersion": {
      "description": "The build version. Maps to the `CFBundleVersion` on macOS, and `FileVersion` metadata property on Windows. Defaults to the `version`.\nIf `TRAVIS_BUILD_NUMBER` or `APPVEYOR_BUILD_NUMBER` or `CIRCLE_BUILD_NUM` or `BUILD_NUMBER` or `bamboo.buildNumber` or `CI_PIPELINE_IID` env defined, it will be used as a build version (`version.build_number`).",
      "type": [
        "null",
        "string"
      ]
    },
    "compression": {
      "anyOf": [
        {
          "enum": [
            "maximum",
            "normal",
            "store"
          ],
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": "normal",
      "description": "The compression level. If you want to rapidly test build, `store` can reduce build time significantly. `maximum` doesn't lead to noticeable size difference, but increase build time."
    },
    "copyright": {
      "default": "Copyright Â© year ${author}",
      "description": "The human-readable copyright line for the app.",
      "type": [
        "null",
        "string"
      ]
    },
    "cscKeyPassword": {
      "type": [
        "null",
        "string"
      ]
    },
    "cscLink": {
      "type": [
        "null",
        "string"
      ]
    },
    "defaultArch": {
      "type": "string"
    },
    "detectUpdateChannel": {
      "default": true,
      "description": "Whether to infer update channel from application version pre-release components. e.g. if version `0.12.1-alpha.1`, channel will be set to `alpha`. Otherwise to `latest`.",
      "type": "boolean"
    },
    "directories": {
      "anyOf": [
        {
          "$ref": "#/definitions/MetadataDirectories"
        },
        {
          "type": "null"
        }
      ]
    },
    "dmg": {
      "anyOf": [
        {
          "$ref": "#/definitions/DmgOptions"
        },
        {
          "type": "null"
        }
      ],
      "description": "macOS DMG options."
    },
    "electronBranding": {
      "$ref": "#/definitions/ElectronBrandingOptions",
      "description": "The branding used by Electron's distributables. This is needed if a fork has modified Electron's BRANDING.json file."
    },
    "electronDist": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": "string"
        }
      ],
      "description": "Returns the path to custom Electron build (e.g. `~/electron/out/R`). Zip files must follow the pattern `electron-v${version}-${platformName}-${arch}.zip`, otherwise it will be assumed to be an unpacked Electron app directory"
    },
    "electronDownload": {
      "$ref": "#/definitions/ElectronDownloadOptions",
      "description": "The [electron-download](https://github.com/electron-userland/electron-download#usage) options."
    },
    "electronUpdaterCompatibility": {
      "description": "The [electron-updater compatibility](/auto-update#compatibility) semver range.",
      "type": [
        "null",
        "string"
      ]
    },
    "electronVersion": {
      "description": "The version of electron you are packaging for. Defaults to version of `electron`, `electron-prebuilt` or `electron-prebuilt-compile` dependency.",
      "type": [
        "null",
        "string"
      ]
    },
    "executableName": {
      "description": "The executable name. Defaults to `productName`.",
      "type": [
        "null",
        "string"
      ]
    },
    "extends": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "The name of a built-in configuration preset (currently, only `react-cra` is supported) or any number of paths to config files (relative to project dir).\n\nThe latter allows to mixin a config from multiple other configs, as if you `Object.assign` them, but properly combine `files` glob patterns.\n\nIf `react-scripts` in the app dependencies, `react-cra` will be set automatically. Set to `null` to disable automatic detection."
    },
    "extraFiles": {
      "anyOf": [
        {
          "$ref": "#/definitions/FileSet"
        },
        {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/FileSet"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": "array"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ]
    },
    "extraMetadata": {
      "description": "Inject properties to `package.json`."
    },
    "extraResources": {
      "anyOf": [
        {
          "$ref": "#/definitions/FileSet"
        },
        {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/FileSet"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": "array"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ]
    },
    "fileAssociations": {
      "anyOf": [
        {
          "$ref": "#/definitions/FileAssociation"
        },
        {
          "items": {
            "$ref": "#/definitions/FileAssociation"
          },
          "type": "array"
        }
      ],
      "description": "The file associations."
    },
    "files": {
      "anyOf": [
        {
          "$ref": "#/definitions/FileSet"
        },
        {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/FileSet"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": "array"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ]
    },
    "forceCodeSigning": {
      "default": false,
      "description": "Whether to fail if the application is not signed (to prevent unsigned app if code signing configuration is not correct).",
      "type": "boolean"
    },
    "generateUpdatesFilesForAllChannels": {
      "default": false,
      "description": "Please see [Building and Releasing using Channels](https://github.com/electron-userland/electron-builder/issues/1182#issuecomment-324947139).",
      "type": "boolean"
    },
    "icon": {
      "type": [
        "null",
        "string"
      ]
    },
    "includePdb": {
      "default": false,
      "description": "Whether to include PDB files.",
      "type": "boolean"
    },
    "includeSubNodeModules": {
      "default": false,
      "description": "Whether to include *all* of the submodules node_modules directories",
      "type": "boolean"
    },
    "linux": {
      "anyOf": [
        {
          "$ref": "#/definitions/LinuxConfiguration"
        },
        {
          "type": "null"
        }
      ],
      "description": "Options related to how build Linux targets."
    },
    "mac": {
      "anyOf": [
        {
          "$ref": "#/definitions/MacConfiguration"
        },
        {
          "type": "null"
        }
      ],
      "description": "Options related to how build macOS targets."
    },
    "msi": {
      "anyOf": [
        {
          "$ref": "#/definitions/MsiOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "msiProjectCreated": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "MSI project created on disk - not packed into .msi package yet."
    },
    "nsis": {
      "anyOf": [
        {
          "$ref": "#/definitions/NsisOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "nsisWeb": {
      "anyOf": [
        {
          "$ref": "#/definitions/NsisWebOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "onNodeModuleFile": {
      "anyOf": [
        {
          "typeof": "function"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ],
      "description": "The function (or path to file or module id) to be [run on each node module](#onnodemodulefile) file."
    },
    "portable": {
      "anyOf": [
        {
          "$ref": "#/definitions/PortableOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "productName": {
      "description": "As [name](#Metadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters not allowed in the [name property](https://docs.npmjs.com/files/package.json#name).",
      "type": [
        "null",
        "string"
      ]
    },
    "protocols": {
      "anyOf": [
        {
          "$ref": "#/definitions/Protocol"
        },
        {
          "items": {
            "$ref": "#/definitions/Protocol"
          },
          "type": "array"
        }
      ],
      "description": "The URL protocol schemes."
    },
    "publish": {
      "anyOf": [
        {
          "$ref": "#/definitions/GenericServerOptions"
        },
        {
          "$ref": "#/definitions/CustomPublishOptions"
        },
        {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/GenericServerOptions"
              },
              {
                "$ref": "#/definitions/CustomPublishOptions"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": "array"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ]
    },
    "rawApp": {
      "anyOf": [
        {
          "$ref": "#/definitions/RawAppOptions"
        },
        {
          "type": "null"
        }
      ]
    },
    "releaseInfo": {
      "$ref": "#/definitions/ReleaseInfo",
      "description": "The release info. Intended for command line usage:\n\n```\n-c.releaseInfo.releaseNotes=\"new features\"\n```"
    },
    "removePackageKeywords": {
      "default": true,
      "description": "Whether to remove `keywords` field from `package.json` files.",
      "type": "boolean"
    },
    "removePackageScripts": {
      "default": true,
      "description": "Whether to remove `scripts` field from `package.json` files.",
      "type": "boolean"
    },
    "target": {
      "anyOf": [
        {
          "$ref": "#/definitions/TargetConfiguration"
        },
        {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/TargetConfiguration"
              },
              {
                "type": "string"
              }
            ]
          },
          "type": "array"
        },
        {
          "type": [
            "null",
            "string"
          ]
        }
      ]
    },
    "win": {
      "anyOf": [
        {
          "$ref": "#/definitions/WindowsConfiguration"
        },
        {
          "type": "null"
        }
      ],
      "description": "Options related to how build Windows targets."
    },
    "$schema": {
      "description": "JSON Schema for this document.",
      "type": [
        "null",
        "string"
      ]
    }
  },
  "type": "object"
}